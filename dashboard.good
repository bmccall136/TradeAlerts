from flask import Flask, render_template, redirect, url_for, request, jsonify
import sqlite3
from api import api
from static_bp import static_bp

app = Flask(__name__)
# Register Blueprints
app.register_blueprint(api)
app.register_blueprint(static_bp)

DB_PATH = 'alerts_clean.db'

def safe_insert_alert(data):
    conn = sqlite3.connect(DB_PATH)
    try:
        conn.execute('''
            INSERT INTO alerts
            (symbol,name,signal,confidence,price,timestamp,type,sparkline,triggers,vwap)
            VALUES (?,?,?,?,?,?,?,?,?,?)
        ''', (
            data.get('symbol'),
            data.get('name'),
            data.get('signal'),
            data.get('confidence'),
            data.get('price'),
            data.get('timestamp'),
            data.get('type', 'sell'),
            data.get('sparkline', ''),
            data.get('triggers', ''),
            data.get('vwap', 0.0)
        ))
    except sqlite3.OperationalError:
        # Fallback if 'type' column missing
        conn.execute('''
            INSERT INTO alerts
            (symbol,name,signal,confidence,price,timestamp,sparkline,triggers,vwap)
            VALUES (?,?,?,?,?,?,?,?,?)
        ''', (
            data.get('symbol'),
            data.get('name'),
            data.get('signal'),
            data.get('confidence'),
            data.get('price'),
            data.get('timestamp'),
            data.get('sparkline', ''),
            data.get('triggers', ''),
            data.get('vwap', 0.0)
        ))
    conn.commit()
    conn.close()

@app.route('/', methods=['GET','POST'])
def index():
    if request.method == 'POST':
        safe_insert_alert(request.get_json(force=True))
        return ('', 204)
    filter_val = request.args.get('filter')
    return render_template('alerts.html', filter=filter_val)

@app.route('/alerts', methods=['POST'])
def post_alert():
    return index()

@app.route('/alerts/<int:alert_id>/clear', methods=['POST'])
def clear_alert(alert_id):
    conn = sqlite3.connect(DB_PATH)
    conn.execute("DELETE FROM alerts WHERE id=?", (alert_id,))
    conn.commit()
    conn.close()
    return ('', 204)

@app.route('/reconnect_api')
def reconnect_api():
    return redirect(url_for('index'))

@app.route('/simulation')
def simulation():
    return render_template('simulation.html')

@app.route('/simulation/reset', methods=['POST'])
def sim_reset():
    return ('', 204)

if __name__ == '__main__':
    app.run(debug=True)
