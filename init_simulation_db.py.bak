# init_simulation_db.py
import sqlite3
import os

# Make sure this path matches what simulation_service.py uses:
SIM_DB = "simulation.db"

if os.path.exists(SIM_DB):
    os.remove(SIM_DB)

conn = sqlite3.connect(SIM_DB)
c = conn.cursor()

# 1) Create 'account' table (for backwards compatibility, you can leave this,
#    but we will use 'state.cash' instead of 'account.cash_balance' going forward)
c.execute('''
    CREATE TABLE IF NOT EXISTS account (
        id INTEGER PRIMARY KEY,
        cash_balance REAL NOT NULL
    );
''')
c.execute("INSERT INTO account (id, cash_balance) VALUES (1, 10000.00);")

# 2) Create 'holdings' table with exactly these columns:
c.execute('''
    CREATE TABLE IF NOT EXISTS holdings (
        symbol     TEXT    PRIMARY KEY,
        qty        INTEGER NOT NULL,
        avg_cost   REAL    NOT NULL,
        last_price REAL    NOT NULL
    );
''')

# 3) Create 'state' table with both cash & realized_pl in one place:
c.execute('''
    CREATE TABLE IF NOT EXISTS state (
       id           INTEGER PRIMARY KEY,
       realized_pl  REAL    NOT NULL DEFAULT 0.0,
       cash         REAL    NOT NULL DEFAULT 10000
    );
''')
c.execute("INSERT INTO state (id, realized_pl, cash) VALUES (1, 0.0, 10000);")

# 4) Create 'simulation_trades' table to log every BUY/SELL:
c.execute('''
    CREATE TABLE IF NOT EXISTS simulation_trades (
       id         INTEGER PRIMARY KEY AUTOINCREMENT,
       symbol     TEXT    NOT NULL,
       action     TEXT    NOT NULL,  -- 'BUY' or 'SELL'
       price      REAL    NOT NULL,
       qty        INTEGER NOT NULL,
       trade_time TEXT    NOT NULL,  -- ISO datetime string
       pnl        REAL    -- only set for SELL trades
    );
''')

conn.commit()
conn.close()
print("âœ… simulation.db has been initialized with account, holdings, state, simulation_trades.")
