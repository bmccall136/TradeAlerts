import pandas as pd
import yfinance as yf
import concurrent.futures
import logging
from services.etrade_service import get_etrade_price, get_etrade_name
from services.alert_service import insert_alert
from services.ohlc_service import fetch_ohlc_data
from services.sparkline_service import generate_sparkline
from services.vwap_service import calculate_vwap

log = logging.getLogger(__name__)

def get_etrade_price(symbol):
    return fetch_etrade_quote(symbol)

def get_etrade_name(symbol):
    return symbol  # Replace with actual logic if needed to fetch name from E*TRADE or cache

def get_symbols(simulation=False):
    file = "sp500_symbols.txt"
    with open(file, "r") as f:
        return [line.strip() for line in f.readlines() if line.strip()]

def fetch_data_with_timeout(symbol, timeout=5):
    with concurrent.futures.ThreadPoolExecutor() as executor:
        future = executor.submit(fetch_ohlc_data, symbol)
        return future.result(timeout=timeout)

def analyze_symbol(symbol):
    try:
        df = fetch_data_with_timeout(symbol)
        if df is None or df.empty:
            return

        price = get_etrade_price(symbol)
        if price is None:
            log.warning(f"{symbol}: No price from E*TRADE")
            return

        name = get_etrade_name(symbol)
        if not name:
            name = symbol

        # Indicators
        df["Close"] = df["close"]
        df["RSI"] = df["Close"].rolling(14).apply(lambda x: 100 - 100 / (1 + x.pct_change().dropna().mean()))  # crude RSI
        df["MACD"] = df["Close"].ewm(span=12).mean() - df["Close"].ewm(span=26).mean()

        last_macd = df["MACD"].iloc[-1]
        last_rsi = df["RSI"].iloc[-1]

        if pd.isna(last_macd) or pd.isna(last_rsi):
            return

        trigger = []
        alert_type = None
        buy_qty = 0

        if last_rsi > 70:
            trigger.append("RSI üìà")
        elif last_rsi < 30:
            trigger.append("RSI üìâ")

        if last_macd > 0:
            trigger.append("MACD üöÄ")

        vwap = calculate_vwap(df)
        vwap_diff = round(price - vwap, 2) if vwap else None

        if vwap and price > vwap:
            trigger.append("VWAP ‚¨Ü")
        elif vwap and price < vwap:
            trigger.append("VWAP ‚¨á")

        # Determine alert type
        if last_rsi > 60 and last_macd > 0 and vwap and price > vwap:
            alert_type = "Prime üíé"
            buy_qty = 5
        elif last_rsi > 50 and last_macd > 0:
            alert_type = "Sharpshooter üéØ"
            buy_qty = 3
        elif last_rsi > 40:
            alert_type = "Opportunist üëç"
            buy_qty = 1

        if not alert_type:
            return

        sparkline = generate_sparkline(df["Close"].tail(10).tolist())

        insert_alert(
            symbol=symbol,
            price=price,
            time=pd.Timestamp.now().strftime("%H:%M:%S"),
            trigger=", ".join(trigger),
            alert_type=alert_type,
            name=name,
            vwap=vwap,
            vwap_diff=vwap_diff,
            qty=buy_qty,
            buy="Buy"
        )

    except Exception as e:
        log.error(f"Error scanning {symbol}: {e}")
