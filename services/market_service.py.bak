import json
import logging
from datetime import datetime
import yfinance as yf

from .alert_service import insert_alert
from .indicators import calculate_macd, compute_rsi, compute_bollinger

logger = logging.getLogger(__name__)

def get_symbols(simulation=False):
    with open('sp500_symbols.txt') as f:
        return [line.strip() for line in f if line.strip()]

def fetch_data(sym, period='1d', interval='5m'):
    return yf.Ticker(sym).history(period=period, interval=interval)

def calculate_vwap(df):
    # Typical price = (High + Low + Close) / 3
    typical_price = (df['High'] + df['Low'] + df['Close']) / 3
    vwap = (typical_price * df['Volume']).cumsum() / df['Volume'].cumsum()
    return vwap

def analyze_symbol(sym):
    df = fetch_data(sym)
    if df.empty:
        return None

    close_price = df['Close'].iloc[-1]
    macd_line, sig_line = calculate_macd(df['Close'])
    rsi_series = compute_rsi(df['Close'])
    vol = df['Volume'].iloc[-1]
    avg_vol = df['Volume'].rolling(20).mean().iloc[-1]
    bb_up, bb_mid, bb_dn = compute_bollinger(df['Close'])

    triggers = []
    if macd_line.iloc[-1] > sig_line.iloc[-1]:
        triggers.append('MACD ðŸš€')
    if rsi_series.iloc[-1] < 30:
        triggers.append('RSI ðŸ“‰')
    if vol > avg_vol:
        triggers.append('VOL ðŸ”Š')
    if close_price > bb_up.iloc[-1] or close_price < bb_dn.iloc[-1]:
        triggers.append('BB ðŸ“ˆ')

    if len(triggers) < 3:
        return None

    alert_type = 'Prime'
    spark = df['Close'].tolist()

    # Company name from yfinance info
    try:
        info = yf.Ticker(sym).info
        name = info.get('shortName', '') or info.get('longName', '') or sym
    except Exception:
        name = sym

    # Calculate VWAP and diff
    vwap_series = calculate_vwap(df)
    vwap = vwap_series.iloc[-1]
    vwap_diff = close_price - vwap

    qty = None  # No quantity logic unless you have one
    buy = None  # No buy qty logic unless you have one

insert_alert(
    symbol=sym,
    price=close_price,
    time=datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
    triggers=",".join(triggers),
    alert_type=alert_type,
    name=name,
    vwap=vwap,
    vwap_diff=vwap_diff,
    qty=qty,
    buy=buy,
    sparkline=spark
)


    # Log detailed info to console
logger.info(
        f"â†’ {sym} | {name} | {alert_type} | ${close_price:.2f} | VWAP: {vwap:.2f} | VWAP Diff: {vwap_diff:.2f} | Triggers: {','.join(triggers)}"
    )
return True
